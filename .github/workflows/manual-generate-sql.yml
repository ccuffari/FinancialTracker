# .github/workflows/generate-db-structure.yml
name: Generate Database Structure

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch da utilizzare'
        required: true
        default: 'main'
        type: string
      python_version:
        description: 'Versione Python'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      deploy_to_neon:
        description: 'Deploy su PostgreSQL Neon'
        required: true
        default: false
        type: boolean

jobs:
  generate-ddl:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Permesso per scrivere nel repository
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
        token: ${{ secrets.GITHUB_TOKEN }}  # Usa il token per i permessi
    
    - name: Set up Python ${{ github.event.inputs.python_version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ github.event.inputs.python_version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('models/python/db_structure_generator/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r models/python/db_structure_generator/requirements.txt
        pip install psycopg2-binary  # Per la connessione PostgreSQL
    
    - name: Verify Excel file exists
      run: |
        if [ ! -f "data/financialTracker.xlsx" ]; then
          echo "❌ File data/financialTracker.xlsx non trovato!"
          exit 1
        fi
        echo "✅ File Excel trovato"
        ls -la data/financialTracker.xlsx
    
    - name: Create output directory
      run: |
        mkdir -p sql/ddl
        echo "✅ Directory sql/ddl creata"
    
    - name: Generate database structure
      run: |
        cd models/python/db_structure_generator
        python main.py
    
    - name: Verify generated SQL file
      run: |
        if [ ! -f "sql/ddl/financial_tracker_ddl.sql" ]; then
          echo "❌ File SQL non generato!"
          exit 1
        fi
        echo "✅ File SQL generato con successo"
        echo "📊 Dimensione file: $(du -h sql/ddl/financial_tracker_ddl.sql | cut -f1)"
        echo "📄 Prime 20 righe del file:"
        head -20 sql/ddl/financial_tracker_ddl.sql
    
    - name: Upload SQL artifact
      uses: actions/upload-artifact@v4
      with:
        name: database-ddl-${{ github.event.inputs.branch }}-py${{ github.event.inputs.python_version }}
        path: sql/ddl/financial_tracker_ddl.sql
        retention-days: 30
    
    # Deploy su PostgreSQL Neon (opzionale)
    - name: Deploy to PostgreSQL Neon
      if: github.event.inputs.deploy_to_neon == 'true'
      env:
        PGHOST: ${{ secrets.PGHOST }}
        PGDATABASE: ${{ secrets.PGDATABASE }}
        PGUSER: ${{ secrets.PGUSER }}
        PGPASSWORD: ${{ secrets.PGPASSWORD }}
        PGSSLMODE: ${{ secrets.PGSSLMODE }}
        PGCHANNELBINDING: ${{ secrets.PGCHANNELBINDING }}
      run: |
        echo "🚀 Inizio deploy su PostgreSQL Neon..."
        
        # Test connessione database
        python -c "
        import psycopg2
        import os
        import sys
        
        try:
            conn = psycopg2.connect(
                host=os.environ['PGHOST'],
                database=os.environ['PGDATABASE'],
                user=os.environ['PGUSER'],
                password=os.environ['PGPASSWORD'],
                sslmode=os.environ['PGSSLMODE'],
                options=f\"-c gssencmode=disable -c channel_binding={os.environ['PGCHANNELBINDING']}\"
            )
            print('✅ Connessione al database riuscita')
            
            # Esegui il DDL
            with conn.cursor() as cursor:
                print('📖 Lettura file SQL...')
                with open('sql/ddl/financial_tracker_ddl.sql', 'r', encoding='utf-8') as f:
                    sql_content = f.read()
                
                print('🔄 Esecuzione DDL sul database...')
                cursor.execute(sql_content)
                conn.commit()
                print('✅ DDL eseguito con successo!')
                
                # Verifica tabelle create
                cursor.execute('''
                    SELECT schemaname, tablename 
                    FROM pg_tables 
                    WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
                    ORDER BY schemaname, tablename;
                ''')
                tables = cursor.fetchall()
                
                print(f'📊 Tabelle create ({len(tables)}):')
                for schema, table in tables:
                    print(f'   - {schema}.{table}')
            
            conn.close()
            print('🎉 Deploy completato con successo!')
            
        except Exception as e:
            print(f'❌ Errore durante il deploy: {str(e)}')
            sys.exit(1)
        "
    
    - name: Database deployment summary
      if: github.event.inputs.deploy_to_neon == 'true'
      run: |
        echo "🎉 Deploy su Neon completato!"
        echo "🌐 Host: ${{ secrets.PGHOST }}"
        echo "🗄️ Database: ${{ secrets.PGDATABASE }}"
        echo "👤 User: ${{ secrets.PGUSER }}"
        echo "🔒 SSL: Abilitato"
    
    - name: Display generation summary
      run: |
        echo "🎉 Generazione completata con successo!"
        echo "📁 Branch utilizzato: ${{ github.event.inputs.branch }}"
        echo "🐍 Python versione: ${{ github.event.inputs.python_version }}"
        echo "📝 File generato: sql/ddl/financial_tracker_ddl.sql"
        echo "💾 Artifact disponibile per il download per 30 giorni"
        
        # Statistiche del file
        if [ -f "sql/ddl/financial_tracker_ddl.sql" ]; then
          echo ""
          echo "📊 Statistiche file generato:"
          echo "   - Righe: $(wc -l < sql/ddl/financial_tracker_ddl.sql)"
          echo "   - Caratteri: $(wc -c < sql/ddl/financial_tracker_ddl.sql)"
          echo "   - Dimensione: $(du -h sql/ddl/financial_tracker_ddl.sql | cut -f1)"
        fi
    
    # Opzionale: Commit automatico del file generato
    - name: Commit generated SQL (optional)
      if: github.event.inputs.branch == 'main' || github.event.inputs.branch == 'develop'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -n "$(git status --porcelain sql/ddl/)" ]; then
          git add sql/ddl/financial_tracker_ddl.sql
          git commit -m "🤖 Auto-generated database DDL from financialTracker.xlsx
          
          - Branch: ${{ github.event.inputs.branch }}
          - Python: ${{ github.event.inputs.python_version }}
          - Generated: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          
          git push
          echo "✅ File committato e pushato automaticamente"
        else
          echo "ℹ️ Nessuna modifica al file SQL da committare"
        fi
